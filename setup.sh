#!/bin/bash

: <<LICENSE
      setup.sh: Rwfus - RW OverlayFS for Deck!
    Copyright (C) 2022 ValShaped (val@soft.fish)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
LICENSE

#TODO: Clean all this code up and make it less hideous

Project_Name="RWfus" 
Project_Description="$Project_Name: RW Overlayfs for SteamOS"
Project_Version="0.1.0"

# the dir where the .rwfus directory will end up
Overlay_Destination="/home/.${Project_Name@L}"
Unit_Destination="/etc/systemd/system"

# Name of the logfile generated by rwfus
Logfile="${Project_Name@L}.log"

# This function sets up new overlayfs mounts for remaining parts of the filesystem
function perform_setup () {
    printf "    RWfus $Product_Version    \nMade with <3 by Val\n\n"

    # Get list of dirs
    local dir_list=${@:-"/usr /etc/pacman.d"}

    # directories
    local tmp="tmp"
    local unit_dir="$tmp/system"

    # overlay directories
    local overlay_base=""
    local overlay_work_base="$overlay_base/.work"

    # target parameters
    local target_name="${Project_Name@L}.target"
    local target_wanted_by="local-fs.target"

    echo "Step 1: Create systemd services"
    mkdir -p "$unit_dir"
    
    cat <<-EOF 
$target_name
  - wanted-by: $target_wanted_by
EOF
    generate_controlling_target "$target_wanted_by" > "$unit_dir/$target_name"
    echo "$Unit_Destination/$target_name" >> "$Logfile"

    for lowerdir in $dir_list; do
        local unit_name=`systemd-escape --path "$lowerdir" --suffix mount`
        local unit_path="$unit_dir/$unit_name";

        # directory structure is flat, so filesystems don't overlap
        # this does mean you can make multiple independent upperdir layers over the same directory tree.
        local upperdir="$overlay_base/${unit_name/.mount/}"
        local workdir="$overlay_work_base/${unit_name/.mount/}"
        cat <<-EOF
$unit_name
  - lower: $lowerdir
  - upper: $Overlay_Destination/$upperdir
  -  work: $Overlay_Destination/$workdir
EOF

        mkdir -p "$tmp/$upperdir" "$tmp/$workdir"; check_panic 1;
        generate_overlay_mount_unit "$lowerdir" "$Overlay_Destination/$upperdir" "$Overlay_Destination/$workdir" "$target_name" > "$unit_path"
        echo "$Unit_Destination/$unit_name" >> "$Logfile"

    done

    echo "Step 2: Move the systemd unit files into /etc/systemd/system"
    sudo cp -r "$unit_dir/." "$Unit_Destination"
    check_panic 2

    echo "Step 3: Move the upper and work directories into $Overlay_Destination"
    sudo cp -r "$tmp/$overlay_base/." "$Overlay_Destination"
    check_panic 3

    echo "Step 4: Activate the unit files"
    for mount_unit in `basename -a $unit_dir/*.mount`; do
        echo "Activating $mount_unit."
        sudo systemctl enable --now "$mount_unit"
        check_panic 4
    done

    echo "Cleaning up..."
    rm -r $tmp

    printf "\nSetup complete!\n"
}

# Generate systemd mount unit file for an overlay
function generate_overlay_mount_unit () {
    local lower="$1" upper="$2" work="$3" wanted_by=$4

    cat <<-EOF
# Generated by $Project_Name
[Unit]
Description=$Project_Description: $lower
Requires=$wanted_by

[Mount]
Options=lowerdir=$lower,upperdir=$upper,workdir=$work
Type=overlay
What=overlay
Where=$lower

[Install]
WantedBy=$wanted_by
EOF
}

# Generate systemd target unit file
function generate_controlling_target () {
    local wanted_by=$1
    cat <<-EOF
# Generated by $Project_Name
[Unit]
Description=$Project_Description

[Install]
WantedBy=$wanted_by
EOF
}

# Sync isn't required in this particular case, but eh
function check_panic () {
    if [ $? != 0 ]; then 
        echo $?
        exit "$1"; 
    fi;
}

#* Script setup
# cd to the directory the script is in
cd $(dirname "$BASH_SOURCE[0]")
# create a new logfile
printf "" > "$Logfile"
# perform setup (see above)
perform_setup $@

exit 0
