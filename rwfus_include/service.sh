#!/bin/false
#shellcheck shell=bash
: <<LICENSE
      service.sh: Rwfus
    Copyright (C) 2022-2023 ValShaped (val@soft.fish)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
LICENSE

: "${IncludeDir:="$(dirname "${BASH_SOURCE[0]}")/rwfus_include"}"
source "$IncludeDir/testlog.sh"
source "$IncludeDir/disk.sh"

function generate_service_script {
    # Add config-parsing to the bootstrapper script
    cat <<EOF
#!/bin/bash
# This file is automatically generated as part of the installation process.
# Changes made to this file will not persist when updating $Name.
echo "$Name v$Version${TESTMODE+ [Test Mode active]}"
echo "$Description"

EOF
    cat "$IncludeDir"/info.sh           # Copy the project's info to the script
    printf "\n# config: Load only\n"
    echo "cf_Config_File=\"$cf_Config_File\"" # Copy the Config path to the script, so it knows where to load from
    declare -f change_base
    declare -f load_config              # Copy the load_config function to the script

    printf "\n# mount: and unmount\n"
    # Copy the disk image m*/um* functions
    declare -f mount_disk
    declare -f unmount_disk
    # Copy the overlay m*/um* functions
    declare -f mount_all
    declare -f unmount_all

    printf "\n# service-main: argument parsing and function running\n"
    cat "$IncludeDir"/service-main.sh   # Copy arg parser and script body
}

function generate_service_unit {
    local script_path=$1
    # Put the unit in the dependency chain
    local wanted_by=${2:-"multi-user.target"}
    # Ensure the unit never starts when home is not mounted, and is stopped if home is unmounted.
    local requires=${3:-"multi-user.target home.mount"}
    # Things have probably stabilized by the time the network.target is coming up
    local after=${5:-"steamos-offload.target network.target"}

cat <<-EOF
# Generated by $Name v$Version${TESTMODE+ [Test Mode active]}
[Unit]
Description=$Name: $Description
Requires=$requires
After=$after

[Service]
Type=oneshot
RemainAfterExit=yes
TimeoutSec=3
ExecStart=$script_path  --start
ExecStop=$script_path   --stop

[Install]
WantedBy=$wanted_by
EOF
}

function generate_service {
    local service_name="${Name@L}d"
    local script_path="$cf_Service_Directory/$service_name.sh"
    local unit_path="$cf_Service_Directory/$service_name.service"
    printf "Generating service %s\n  script %s\n  unit   %s\n" "$service_name" "$script_path" "$unit_path"
    generate_service_script > "$script_path" && chmod +x "$script_path"
    generate_service_unit "$script_path" > "$unit_path"
}

function enable_service {
    # Enable the service, or print an error
    if ! Log Test systemctl enable --now -- "$(list_service)"; then
        Log -p printf "Error when enabling service. See %s for information.\n" "$cf_Logfile" >& 2
        return 1
    fi
}

function disable_service {
    # Disable the service, or print an error
    if ! Log Test systemctl disable --now -- "$(list_service)"; then
        Log -p printf "Error when disabling service. See %s for information.\n" "$cf_Logfile" >& 2
        return 1
    fi
}

function remove_service {
    for unit in $(list_service); do
        if ! Log rm -v -- "$cf_Systemd_Directory/$unit"; then
            Log -p printf "Error when deleting service. See %s for information.\n" "$cf_Logfile" >& 2
            return 1
        fi
    done
}

function service_state {
    systemctl show -p ActiveState --value -- "$(list_service)"
}

function stat_service {
    if [[ -d $cf_Service_Directory ]]; then
        SYSTEMD_COLORS=1 Test systemctl status --lines 0 --no-pager -- "$(list_service)"
    else
        echo "Rwfus is not installed. Install it with \`rwfus --install\`"
        return 1
    fi
}

function list_service {
    # Send error channel to the shadow realm
    find "$cf_Service_Directory" -name "*.service" -printf "%f" 2> /dev/null
}

function service {
    case "$1" in
        g|generate)
        shift
        case "$1" in
            script)
                generate_service_script
            ;;
            unit)
                generate_service_unit
            ;;
            *)
                generate_service
            ;;
        esac
        ;;
        e|enable)
            shift
            enable_service
        ;;
        d|disable)
            shift
            disable_service
        ;;
        r|remove)
            shift
            remove_service
        ;;
        l|list)
            list_service
        ;;
        *)
            stat_service
        ;;
    esac
}
