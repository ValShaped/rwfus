: <<LICENSE
      config.sh: Rwfus
    Copyright (C) 2022 ValShaped (val@soft.fish)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
LICENSE

# This function loads the default config. Run `rwfus --gen-config` to generate an example file.
function load_defaults {
    # Default Overlay list
    #   /usr : contains /usr/bin, /usr/lib; popular install locations. On path.
    #   /etc/pacman.d /var/lib/pacman /var/cache/pacman : store pacman state
    Directories="/usr /etc/pacman.d /var/lib/pacman /var/cache/pacman"

    # Default directories (These can be changed in the config file. Run `rwfus --gen-config` to generate an example file.)
    Base_Directory="/opt/${Name@L}" # Where all the files will go
    Service_Directory=              # Where generated service will go
    # Disk
    Disk_Image=                     # Where the disk image will go
    Mount_Directory=                # Where the disk image will be mounted
    # Overlayfs
    Upper_Directory=                # Where the overlayfs upper dirs will go
    Work_Directory=                 # Where the overlayfs work dirs will go

    # Derive all of the above paths
    change_base

    # Systemd-related things
    Systemd_Directory="/etc/systemd/system"     # Where systemd expects units to be

    # Rwfus config is stored in a partitionless btrfs image
    Mount_Options="loop,compress"                 # Make sure you keep 'loop', so it creates a loop device

    # SteamOS Offload offloads /usr/local to /home/.steamos/offload/usr/local
    # Beware! This will be considered read-only to overlayfs, so adding stuff while rwfus is enabled is not recommended.
    Path_Install_Directory="/home/.steamos/offload/usr/local/bin"
}

function change_base {
    # Service Directory
    Service_Directory="$Base_Directory/service"   # Where generated service will go
    Disk_Image="$Base_Directory/${Name@L}.btrfs"  # Where the disk image will go
    Mount_Directory="$Base_Directory/mount"       # Where the disk image will be mounted
    Upper_Directory="$Mount_Directory/upper"      # Where the overlayfs upper dirs will go
    Work_Directory="$Mount_Directory/work"        # Where the overlayfs work dirs will go
}

function enable_testmode {
    TESTMODE=1

    local testdir="${1:-./test}"

    # Use the change-of-base theorem
    Base_Directory="$testdir${Base_Directory}"
    change_base

    # Change Path_Install_Directory and Systemd_Directory
    Path_Install_Directory="$testdir$Path_Install_Directory"
    Systemd_Directory="$testdir$Systemd_Directory"
    # Change config and logfile location
    Config_File="$testdir$Config_File"
    Log_File="$testdir$Log_File"
    # Create test directory tree
    mkdir -p "$Systemd_Directory"
    mkdir -p "$Path_Install_Directory"
    mkdir -p "$testdir/tmp"

}

function save_config {
    local config_file="$1"
    echo "Storing config file to $config_file..."
    cat << EOF > "$config_file"
# Generated by $Name v$Version${TESTMODE+ [Test Mode active]}

[Base]
# $Name's 'home' directory
Base_Directory ${Base_Directory}
# Where ${Name} is installed when running \`${Name@L} --install-bin\`
Path_Install_Directory ${Path_Install_Directory}

[Overlay]
# List of directories to overlay
Directories ${Directories}

[Disk]
# The image must be mounted with the 'loop' option
# All other btrfs mount options are fair game though. Play around!
Mount_Options    ${Mount_Options}

#Disk_Image      ${Disk_Image}
#Mount_Directory ${Mount_Directory}

[Systemd]
# Scripts and systemd units go in this directory
#Service_Directory ${Service_Directory}
# Directory that systemd loads units from
Systemd_Directory  ${Systemd_Directory}

EOF
    ls -l $config_file
}

function load_config {
    local config_file=$1
    echo "Loading config file $config_file"
    if [[ ! -f $config_file ]]; then echo "$config_file not found"; return -1; fi
    if [[ $CONFIG_LOADED ]];    then echo "Config already loaded";  return -2; fi
    while read -r var val; do
        # filter lines which start with (some whitespace and) a hash sign or square bracket; those are comments.
        # also filter lines which don't contain any non-space characters.
        local expression='^[[:space:]]*[^\[\#[:space:]]+'
        if [[ "$var" =~ $expression ]]; then
            printf "> $var: \"$val\"\n"
            declare -g $var="${val}"
            if [[ "$var" =~ "Base_Directory" ]]; then
                # Set the other directories relative to this one
                # Since Base_Directory comes first in the config,
                # other entries will overwrite these defaults
                change_base
            fi
        fi
    done < $config_file
    CONFIG_LOADED=1
    echo
}

function config {
    local config_file="${2:-$Config_File}"
    case "$1" in
        -l|--load)
            load_config "$config_file"
            if [[ $? -eq -1 ]]; then
                load_defaults
            fi
        ;;
        -s|--store)
            if [[ -f "$config_file" ]]; then
                # Make a new file
                > "$config_file"
            fi
            save_config "$config_file"
        ;;
        *)
            return -128
        ;;
    esac
}
