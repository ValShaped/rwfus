#!/bin/bash
: <<LICENSE
      rwfus: Rwfus - RW OverlayFS for Deck!
    Copyright (C) 2022 ValShaped (val@soft.fish)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
LICENSE
caller_dir=${PWD}
cd $(dirname "$BASH_SOURCE[0]")
source rwfus_include/testlog.sh
source rwfus_include/units.sh
source rwfus_include/manage-install.sh
source rwfus_include/config.sh

# Project metadata
Name="Rwfus"
Description="Carry Pacman across SteamOS updates!"
Version="0.2.1"

# Default destinations
Base_Directory="/home/.${Name@L}"               # Where all the files will go
Work_Directory="$Base_Directory/.work"        # Where the overlayfs work dirs will go
Unit_Directory="$Base_Directory/.units"    # Where all the generated units will go
Systemd_Directory="/etc/systemd/system"         # Where systemd expects units to be

# Default Directories list
#   /usr : /usr/bin, /usr/lib; popular install locations. On path.
#   /etc/pacman.d /var/lib/pacman /var/cache/pacman : store pacman state
Directories="/usr /etc/pacman.d /var/lib/pacman /var/cache/pacman"

# Default logfile path
Logfile=`mktemp /tmp/${Name@L}.XXXX.log`

# Default operation
Default_Operation="perform_install"

function print_help {
    cat <<EOF
$Name v$Version
$Description

USAGE:
    $0 [FLAGS] [OPTIONS] [--] [DIRECTORY]...

FLAGS:
    -h, --help          Show this help text, then exit
    -v, --version       Show the version number, then exit

    -i, --install*      Install $Name
    -u, --update*       Re-generate systemd mount files, without touching data
    -r, --remove*       Remove ALL FILES AND DIRECTORIES associated with $Name

    -e, --enable*       Activate $Name's overlay mounts
    -d, --disable*      Deactivate $Name's overlay mounts
    -s, --status        Get the status of $Name's overlay mounts

        --install-bin*  Put $0 into the overlayed /usr/local/bin folder
        --remove-bin*   Remove $Name from the overlayed /usr/local/bin folder

    -t, --test          Use fake directory targets when performing operations
    -g, --gen-config    Generate a sample config file, which you can use to customize your install

    * flags marked with a star require root, unless the --test flag is set.

    OPTIONS:
    -l, --logfile <path>    Specify the location of $Name's log file
                                Default: $Logfile (random)
    -c, --config <path>     Specify a configuration file to use
                                Default: $Base_Directory/

ARGS:
    <DIRECTORY>...      List of directories to create overlays for
                            Defaults: $Directories
EOF
}

# Parse options
LONGOPTS="help,install,update,remove,enable,disable,status,test,version,install-bin,remove-bin,gen-config,logfile:,config:"
SHORTOPTS="hiuredstvgl:c:"
PARSED=`getopt --options "$SHORTOPTS" --longoptions "$LONGOPTS" --name $0 -- $@`
if [[ $? != 0 ]]; then
    echo "Usage: $0 [-hiuredstvg] [-l path/to/logfile] [-c path/to/config] [/dir1 /dir2 ...]"
    exit -128;
fi
eval set -- "$PARSED"

while true; do
    case "$1" in
    # Help
        -h|--help)
            print_help
            exit 0
        ;;
    # Installation operations
        -i|--install)
            Operation+="perform_install "
            shift
            ;;
        -u|--update)
            Operation+="perform_update "
            shift
            ;;
        -r|--remove)
            Operation+="perform_remove_all "
            shift
            ;;
    # Enablement control operations
        -e|--enable)
            Operation+="enable_units "
            shift
            ;;
        -d|--disable)
            Operation+="disable_units "
            shift
            ;;
        -s|--status)
            Operation+="stat_units "
            shift
            ;;
    # Test mode
        -t|--test)
            TESTMODE=1
            shift
            ;;
        -g|--gen-config)
            config --store "$caller_dir/${Name@L}.conf"
            echo "Wrote config to $caller_dir/${Name@L}.conf"
            exit 0
            shift
            ;;
    # Get information
        -v|--version)
            printf "$Name, version $Version\n$Description\n"
            exit 0
        ;;
    # on-path installation
        --install-bin)
            Operation+="add_to_bin "
            shift
        ;;
        --remove-bin)
            Operation+="remove_from_bin "
            shift
        ;;
    # Options
        -l|--logfile)
            rm "$Logfile"
            Logfile="$2"
            shift 2
            ;;
        -c|--config)
            config --load "$2"
            shift 2
            ;;

        --)
            shift
            break
            ;;
        *)
            echo "If you just ran $Project_Name, and saw this, you've encountered easter egg #1! Please tell a developer right away."
            exit -1
            ;;
    esac
done

# Register exit handler to print name of logfile on exit
trap get_logfile_name EXIT

# Log preamble
Log --new
Log cat <<EOF
$Name v$Version ${TESTMODE+[Test Mode active]}
$Description

$Name directory: $Base_Directory
Unit Storage directory: $Unit_Directory
Systemd directory: $Systemd_Directory

EOF

if [[ $TESTMODE ]]; then
    Base_Directory="${caller_dir}/test${Base_Directory}"
    Work_Directory="$Base_Directory/.work"
    Unit_Directory="$Base_Directory/.units"
    Systemd_Directory="${caller_dir}/test$Systemd_Directory"
    mkdir -p "$Systemd_Directory"
fi

for operation in ${Operation:=$Default_Operation}; do
    case "$operation" in
        "perform_install"|"perform_update"|"perform_remove_all")
            Directories="${@:-$Directories}"
            $operation $Directories
        ;;
        "enable_units"|"disable_units"|"stat_units")
            $operation ${Unit_Directory} "STAT!"
        ;;
        "add_to_bin"|"remove_from_bin")
            $operation
        ;;
        *)
            Log -p echo "You've encountered easter egg #2, \"$operation\"! Contact a developer and let them know!"
            exit -1;
        ;;
    esac
done
exit 0
