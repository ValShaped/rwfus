#!/bin/bash
: <<LICENSE
      rwfus: Rwfus - RW OverlayFS for Deck!
    Copyright (C) 2022 ValShaped (val@soft.fish)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
LICENSE
caller_dir=${PWD}
caller_cmd="$0 $@"

cd $(dirname "$BASH_SOURCE[0]")
source rwfus_include/info.sh           # Project information (name, etc.)
source rwfus_include/testlog.sh        # Logging
source rwfus_include/service.sh        # Generate and manage (un-)mounting service and associated unit file
source rwfus_include/manage-install.sh # Installation management
source rwfus_include/config.sh         # Configuration files

# Default directories (These can be changed in the config file. Run `rwfus --gen-config` to generate an example file.)
Base_Directory="/opt/.${Name@L}"            # Where all the files will go

Upper_Directory="$Base_Directory/upper"     # Where the overlayfs upper dirs will go
Work_Directory="$Base_Directory/work"       # Where the overlayfs work dirs will go

Service_Directory="$Base_Directory/service" # Where generated service will go

Systemd_Directory="/etc/systemd/system"     # Where systemd expects units to be

# SteamOS Offload offloads /usr/local to /home/.steamos/offload/usr/local
# Beware! This will be considered read-only to overlayfs, and adding stuff while rwfus is enabled is not recommended.
Path_Install_Directory="/home/.steamos/offload/usr/local/bin"

# Default paths
Log_File="/tmp/${Name@L}.XXXX.log"
Config_File="/etc/${Name@L}.conf"

# Default Overlay list
#   /usr : contains /usr/bin, /usr/lib; popular install locations. On path.
#   /etc/pacman.d /var/lib/pacman /var/cache/pacman : store pacman state
Directories="/usr /etc/pacman.d /var/lib/pacman /var/cache/pacman"

# Default operation
Default_Operation="stat_service "

function print_help {
    cat <<EOF
$Name v$Version
$Description

USAGE:
    $0 [FLAGS] [OPTIONS] [--] [DIRECTORY]...

FLAGS:
    -h, --help          Show this help text, then exit
    -v, --version       Show the version number, then exit

    -i, --install*      Install $Name
    -u, --update*       Re-generate systemd mount files, without touching data
    -r, --remove*       Remove ALL FILES AND DIRECTORIES associated with $Name

    -e, --enable*       Activate $Name's overlay mounts
    -d, --disable*      Deactivate $Name's overlay mounts
    -s, --status        Get the status of $Name's overlay mounts

    -I, --install-bin*  Put $0 into a [...]/usr/local/bin folder
    -R, --remove-bin*   Remove $Name from a [...]/usr/local/bin folder

    -t, --test          Use fake directory targets when performing operations
    -g, --gen-config    Generate a sample config file, which you can use to customize your install

    * flags marked with a star require root, unless the --test flag is set.

    OPTIONS:
    -l, --logfile <path>    Specify the location of $Name's log file
                                Default: $Log_File (where X is random)
    -c, --config <path>     Specify a configuration file to use
                                Default: $Base_Directory/

ARGS:
    <DIRECTORY>...      List of directories to create overlays for
                            Defaults: $Directories
EOF
}

# Parse options
LONGOPTS="help,install,update,remove,enable,disable,status,test,version,install-bin,remove-bin,gen-config,gen-script,logfile:,config:"
SHORTOPTS="hiuredstvIRgl:c:"
PARSED=`getopt --options "$SHORTOPTS" --longoptions "$LONGOPTS" --name $0 -- $@`
if [[ $? != 0 ]]; then
    echo "Usage: $0 [-hiuredstvg] [-l path/to/logfile] [-c path/to/config] [/dir1 /dir2 ...]"
    exit -128;
fi
eval set -- "$PARSED"

while true; do
    case "$1" in
    # Get information
        -h|--help)
            Operation+="print_help "
            shift
        ;;
        -v|--version)
            Operation+="version "
            shift
        ;;
    # Installation operations
        -i|--install)
            Operation+="perform_install "
            shift
            ;;
        -u|--update)
            Operation+="perform_update "
            shift
            ;;
        -r|--remove)
            Operation+="perform_remove_all "
            shift
            ;;
    # Enablement control operations
        -e|--enable)
            Operation+="enable_service stat_service "
            shift
            ;;
        -d|--disable)
            Operation+="disable_service stat_service "
            shift
            ;;
        -s|--status)
            Operation+="stat_service "
            shift
            ;;
    # Test mode
        -t|--test)
            TESTMODE=1
            shift
            ;;
        -g|--gen-config)
            config --store "$caller_dir/${Name@L}.conf"
            echo "Wrote config to $caller_dir/${Name@L}.conf"
            exit 0
            ;;
        --gen-script)
            generate_service_script > "$caller_dir/${Name@L}-service.sh"
            echo "Wrote script to $caller_dir/${Name@L}-service.sh"
            exit 0
            ;;
    # on-path installation
        -I|--install-bin)
            Operation+="add_to_bin "
            shift
        ;;
        -R|--remove-bin)
            Operation+="remove_from_bin "
            shift
        ;;
    # Options
        -l|--logfile)
            Log_File="$2"
            shift 2
            ;;
        -c|--config)
            Config_File="$2"
            shift 2
            ;;

        --)
            shift
            break
            ;;
        *)
            echo "You've encountered unreachable path #1, invalid arg \"$1\"! Please tell a developer right away."
            exit -1
            ;;
    esac
done

# Set up TESTMODE
if [[ $TESTMODE ]]; then
    Base_Directory="./test${Base_Directory}"
    Upper_Directory="./test$Upper_Directory"
    Work_Directory="./test$Work_Directory"
    Service_Directory="./test$Service_Directory"
    Systemd_Directory="./test$Systemd_Directory"
    Path_Install_Directory="./test$Path_Install_Directory"
    Config_File="./test$Config_File"
    Log_File="./test$Log_File"

    mkdir -p "$Systemd_Directory"
    mkdir -p "$Path_Install_Directory"
    mkdir -p "./test/tmp"
fi

function initialize_log {
    Log --new
    Log echo $caller_cmd
    trap get_logfile_name EXIT
}

for operation in ${Operation:=$Default_Operation}; do
    case "$operation" in
        "perform_install"|"perform_update"|"perform_remove_all"|\
        "add_to_bin"|"remove_from_bin"|\
        "enable_service"|"disable_service")
            check_permissions
            initialize_log
            Log config --load
            $operation $@
        ;;
        "stat_service")
            $operation
        ;;
        "print_help")
            $operation
            exit 0
        ;;
        "version")
            printf "$Name v$Version\n$Description\n"
        ;;
        *)
            trap get_logfile_name EXIT
            Log -p echo "You've encountered unreachable path #2, invalid operation \"$operation\"! Contact a developer and let them know!"
            exit -1
        ;;
    esac
done
exit 0
